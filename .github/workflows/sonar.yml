name: Sonar

on:
  workflow_call:

jobs:
  sonar:
    name: Sonar Check
    runs-on: ubuntu-latest
    steps:
      #china-tech-dev vpn configure
      - run: sudo apt install wireguard

      - run: sudo apt install curl

      - run: echo "${{ secrets.VPN_PRIVATEKEY }}" > privatekey

      - run: sudo ip link add dev wg0 type wireguard

      - run: sudo ip address add dev wg0 10.10.0.2 peer 10.10.0.1

      - run: sudo wg set wg0 listen-port 48123 private-key privatekey peer yN3TXjZDCVrY4T0Y0x73Cv0MRsrdaE4+D9h3Z60Czmo= allowed-ips 0.0.0.0/0 endpoint ${{ secrets.VPN_ENDPOINT }}

      - run: sudo ip link set up dev wg0

      - run: sudo wg show

      - run: sudo ip route add 192.168.0.0/16 via 10.10.0.2 dev wg0

      - run: sudo ip route add 10.100.0.0/16 via 10.10.0.2 dev wg0

      - run: |
          echo "nameserver 10.100.0.10" | sudo tee /etc/resolv.conf
          echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
          echo "search china-tech-dev.svc.cluster.local svc.cluster.local cluster.local us-east-2.compute.internal" | sudo tee -a /etc/resolv.conf
          wget devops-java-demo:8080/user/version

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Maven Dependencies Cache
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      - name: Config Maven Settings Xml
        uses: whelk-io/maven-settings-xml-action@v20
        with:
          repositories: '[{ "id": "seel-engr-seel-maven-server", "url": "https://seel-engr-003929763495.d.codeartifact.us-east-2.amazonaws.com/maven/seel-maven-server/" }]'
          servers: '[{ "id": "seel-engr-seel-maven-server", "username": "aws", "password": "${env.CODEARTIFACT_AUTH_TOKEN}" }]'

      - name: Set CodeArtifact Auth Token
        run : echo "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain seel-engr --domain-owner 003929763495 --query authorizationToken --output text)" >> $GITHUB_ENV

      - name: Build Test Analyze
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.organization=kover-ai \
          -Dsonar.projectKey=kover-ai_${{ github.event.repository.name }} \
          -Dsonar.coverage.jacoco.xmlReportPaths=../${{ github.event.repository.name }}/target/coverage-reports/jacoco.xml
        env:
          GITHUB_TOKEN: ${{ secrets.CLONE_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#  test:
#    name: Code Test
#    needs: scan
#    runs-on: ubuntu-latest
#    steps:
#
#      - run: sudo apt install wireguard
#
#      - run: sudo apt install curl
#
#      - run: echo "${{ secrets.VPN_PRIVATEKEY }}" > privatekey
#
#      - run: sudo ip link add dev wg0 type wireguard
#
#      - run: sudo ip address add dev wg0 10.10.0.2 peer 10.10.0.1
#
#      - run: sudo wg set wg0 listen-port 48123 private-key privatekey peer yN3TXjZDCVrY4T0Y0x73Cv0MRsrdaE4+D9h3Z60Czmo= allowed-ips 0.0.0.0/0 endpoint ${{ secrets.VPN_ENDPOINT }}
#
#      - run: sudo ip link set up dev wg0
#
#      - run: sudo wg show
#
#      - run: sudo ip route add 192.168.0.0/16 via 10.10.0.2 dev wg0
#
#      - run: sudo ip route add 10.100.0.0/16 via 10.10.0.2 dev wg0
#
#      - run: |
#          echo "nameserver 10.100.0.10" | sudo tee /etc/resolv.conf
#          echo "search china-tech-dev.svc.cluster.local svc.cluster.local cluster.local us-east-2.compute.internal" | sudo tee -a /etc/resolv.conf
#      - name: Check Out Code
#        uses: actions/checkout@v2
#
#      - name: Set Github Short SHA
#        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
#
#      - name: echo Github Short SHA
#        run: echo ${{ env.GITHUB_SHA_SHORT }}
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      - name: Maven Dependencies Cache
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '11'
#          cache: 'maven'
#
#      - name: Config Maven Settings Xml
#        uses: whelk-io/maven-settings-xml-action@v20
#        with:
#          repositories: '[{ "id": "seel-engr-seel-maven-server", "url": "https://seel-engr-003929763495.d.codeartifact.us-east-2.amazonaws.com/maven/seel-maven-server/" }]'
#          servers: '[{ "id": "seel-engr-seel-maven-server", "username": "aws", "password": "${env.CODEARTIFACT_AUTH_TOKEN}" }]'
#
#      - name: Set CodeArtifact Auth Token
#        run : echo "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain seel-engr --domain-owner 003929763495 --query authorizationToken --output text)" >> $GITHUB_ENV
#
#      - name: Run Tests
#        run: mvn clean package
#
#      - name: Checkout Tool Repo
#        uses: actions/checkout@v3
#        with:
#          repository: kover-ai/deploy-self-service
#          ref: master
#          token: ${{ secrets.CLONE_TOKEN }}
#          path: 'deploy-self-service'
#
#      - name: Login AWS ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, Push Image To AWS ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ github.event.repository.name }}
#          IMAGE_TAG: ${{ env.GITHUB_SHA_SHORT }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          echo "Pushing image to ECR..."
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"